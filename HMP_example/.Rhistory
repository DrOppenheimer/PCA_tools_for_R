legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.001, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.00001, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.0000000000000001, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.0000000000001, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.000000000001, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.00000000001, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.000000000001, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.00000000000001, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.0000000000001, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.000000000001, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.0000000000001, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.0000000000005, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.0000000000002, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.0000000000003, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.00000000000025, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.00000000000021, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.00000000000022, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.00000000000023, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.000000000000235, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.000000000000239, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Create the custom legend plot
legend_plot <- ggplot() +
geom_point(data = legend_data, aes(x = x, y = y, color = legend_colors), size = 5) +
scale_color_identity() +
geom_text(data = legend_data, aes(x = x + 0.0000000000003, y = y, label = legend_names), hjust = 0) +
theme_void() +
theme(legend.position = "none")
# Display the custom legend
print(legend_plot)
# Load the grid package
library(grid)
# Define the legend names and colors
legend_names <- c("Group A", "Group B", "Group C", "Group D", "Group E")
legend_colors <- c("red", "blue", "green", "purple", "orange")
# Create a function to draw the custom legend
create_legend <- function(names, colors) {
# Set up the viewport
grid.newpage()
pushViewport(viewport(layout = grid.layout(length(names), 2)))
# Draw the colored points and text
for (i in seq_along(names)) {
grid.rect(gp = gpar(fill = colors[i]), width = unit(1, "lines"), height = unit(1, "lines"), just = "left")
grid.text(names[i], x = unit(1.5, "lines"), y = unit(1, "npc") - unit(i - 1, "lines"), just = "left")
}
}
# Create and display the custom legend
create_legend(legend_names, legend_colors)
# Create a function to draw the custom legend
create_legend <- function(names, colors) {
# Set up the viewport
grid.newpage()
pushViewport(viewport(layout = grid.layout(length(names), 2)))
# Draw the colored points and text
for (i in seq_along(names)) {
grid.rect(gp = gpar(fill = colors[i]), width = unit(1, "lines"), height = unit(1, "lines"), just = "left")
grid.text(names[i], x = unit(0.5, "lines"), y = unit(1, "npc") - unit(i - 1, "lines"), just = "left")
}
}
# Create and display the custom legend
create_legend(legend_names, legend_colors)
# Create a function to draw the custom legend
create_legend <- function(names, colors) {
# Set up the viewport
grid.newpage()
pushViewport(viewport(layout = grid.layout(length(names), 2)))
# Draw the colored points and text
for (i in seq_along(names)) {
grid.rect(gp = gpar(fill = colors[i]), width = unit(1, "lines"), height = unit(1, "lines"), just = "left")
grid.text(names[i], x = unit(0, "lines"), y = unit(1, "npc") - unit(i - 1, "lines"), just = "left")
}
}
# Create and display the custom legend
create_legend(legend_names, legend_colors)
# Create a function to draw the custom legend
create_legend <- function(names, colors) {
# Set up the viewport
grid.newpage()
pushViewport(viewport(layout = grid.layout(length(names), 2)))
# Draw the colored points and text
for (i in seq_along(names)) {
grid.rect(gp = gpar(fill = colors[i]), width = unit(1, "lines"), height = unit(1, "lines"), just = "left")
grid.text(names[i], x = unit(0.5, "lines"), y = unit(2, "npc") - unit(i - 1, "lines"), just = "left")
}
}
# Create and display the custom legend
create_legend(legend_names, legend_colors)
# Create a function to draw the custom legend
create_legend <- function(names, colors) {
# Set up the viewport
grid.newpage()
pushViewport(viewport(layout = grid.layout(length(names), 2)))
# Draw the colored points and text
for (i in seq_along(names)) {
grid.rect(gp = gpar(fill = colors[i]), width = unit(1, "lines"), height = unit(1, "lines"), just = "left")
grid.text(names[i], x = unit(0.5, "lines"), y = unit(0, "npc") - unit(i - 1, "lines"), just = "left")
}
}
# Create and display the custom legend
create_legend(legend_names, legend_colors)
# Create a function to draw the custom legend
create_legend <- function(names, colors) {
# Set up the viewport
grid.newpage()
pushViewport(viewport(layout = grid.layout(length(names), 2)))
# Draw the colored points and text
for (i in seq_along(names)) {
grid.rect(gp = gpar(fill = colors[i]), width = unit(1, "lines"), height = unit(1, "lines"), just = "left")
grid.text(names[i], x = unit(0.5, "lines"), y = unit(0.5, "npc") - unit(i - 1, "lines"), just = "left")
}
}
# Create and display the custom legend
create_legend(legend_names, legend_colors)
# Create a function to draw the custom legend
create_legend <- function(names, colors) {
# Set up the viewport
grid.newpage()
pushViewport(viewport(layout = grid.layout(length(names), 2)))
# Draw the colored points and text
for (i in seq_along(names)) {
grid.rect(gp = gpar(fill = colors[i]), width = unit(1, "lines"), height = unit(0.5, "lines"), just = "left")
grid.text(names[i], x = unit(0.5, "lines"), y = unit(0.5, "npc") - unit(i - 1, "lines"), just = "left")
}
}
# Create and display the custom legend
create_legend(legend_names, legend_colors)
# Define the legend names and colors
legend_names <- c("Group A", "Group B", "Group C", "Group D", "Group E")
legend_colors <- c("red", "blue", "green", "purple", "orange")
# Create a function to draw the custom legend
create_legend <- function(names, colors) {
# Set up the viewport
grid.newpage()
pushViewport(viewport(layout = grid.layout(length(names), 2, widths = unit(c(1, 4), "lines"))))
# Draw the colored points and text
for (i in seq_along(names)) {
pushViewport(viewport(layout.pos.row = i, layout.pos.col = 1))
grid.rect(gp = gpar(fill = colors[i]), width = unit(1, "lines"), height = unit(1, "lines"))
upViewport()
pushViewport(viewport(layout.pos.row = i, layout.pos.col = 2))
grid.text(names[i], x = unit(0, "npc"), just = "left")
upViewport()
}
}
# Create and display the custom legend
create_legend(legend_names, legend_colors)
l
l
# Define the legend names and colors
legend_names <- c("Group A", "Group B", "Group C", "Group D", "Group E")
legend_colors <- c("red", "blue", "green", "purple", "orange")
# Create a function to draw the custom legend
create_legend <- function(names, colors) {
# Set up the viewport
grid.newpage()
pushViewport(viewport(layout = grid.layout(length(names), 2, widths = unit(c(1, 4), "lines"))))
# Draw the colored points and text
for (i in seq_along(names)) {
pushViewport(viewport(layout.pos.row = i, layout.pos.col = 1))
grid.rect(gp = gpar(fill = colors[i]), width = unit(1, "lines"), height = unit(1, "lines"))
upViewport()
pushViewport(viewport(layout.pos.row = i, layout.pos.col = 2))
grid.text(names[i], x = unit(0.3, "npc"), just = "left")
upViewport()
}
}
# Create and display the custom legend
create_legend(legend_names, legend_colors)
# Create a function to draw the custom legend
create_legend <- function(names, colors) {
# Set up the viewport
grid.newpage()
pushViewport(viewport(layout = grid.layout(length(names), 2, widths = unit(c(1, 4), "lines"))))
# Draw the colored points and text
for (i in seq_along(names)) {
pushViewport(viewport(layout.pos.row = i, layout.pos.col = 1))
grid.rect(gp = gpar(fill = colors[i]), width = unit(1, "lines"), height = unit(1, "lines"))
upViewport()
pushViewport(viewport(layout.pos.row = i, layout.pos.col = 2))
grid.text(names[i], x = unit(0.2, "npc"), just = "left")
upViewport()
}
}
# Create and display the custom legend
create_legend(legend_names, legend_colors)
# Create a function to draw the custom legend
create_legend <- function(names, colors) {
# Set up the viewport
grid.newpage()
pushViewport(viewport(layout = grid.layout(length(names), 2, widths = unit(c(1, 4), "lines"))))
# Draw the colored points and text
for (i in seq_along(names)) {
pushViewport(viewport(layout.pos.row = i, layout.pos.col = 1))
grid.rect(gp = gpar(fill = colors[i]), width = unit(1, "lines"), height = unit(1, "lines"))
upViewport()
pushViewport(viewport(layout.pos.row = i, layout.pos.col = 2))
grid.text(names[i], x = unit(0.1, "npc"), just = "left")
upViewport()
}
}
# Create and display the custom legend
create_legend(legend_names, legend_colors)
# Define the legend names and colors
legend_names <- c(my_colors$legText)
legend_colors <- c(my_colors$legColors)
# Create a function to draw the custom legend
create_legend <- function(names, colors) {
# Set up the viewport
grid.newpage()
pushViewport(viewport(layout = grid.layout(length(names), 2, widths = unit(c(1, 4), "lines"))))
# Draw the colored points and text
for (i in seq_along(names)) {
pushViewport(viewport(layout.pos.row = i, layout.pos.col = 1))
grid.rect(gp = gpar(fill = colors[i]), width = unit(1, "lines"), height = unit(1, "lines"))
upViewport()
pushViewport(viewport(layout.pos.row = i, layout.pos.col = 2))
grid.text(names[i], x = unit(0.1, "npc"), just = "left")
upViewport()
}
}
# Create and display the custom legend
create_legend(legend_names, legend_colors)
# Define the legend names and colors
legend_names <- c("Group A", "Group B", "Group C", "Group D", "Group E")
legend_colors <- c("red", "blue", "green", "purple", "orange")
# Create a function to draw the custom legend
create_legend <- function(names, colors) {
# Set up the viewport
grid.newpage()
pushViewport(viewport(layout = grid.layout(length(names), 2, widths = unit(c(1, 4), "lines"))))
# Draw the colored points and text
for (i in seq_along(names)) {
pushViewport(viewport(layout.pos.row = i, layout.pos.col = 1, just = "left"))
grid.rect(gp = gpar(fill = colors[i]), width = unit(1, "lines"), height = unit(1, "lines"), just = "left")
upViewport()
pushViewport(viewport(layout.pos.row = i, layout.pos.col = 2, just = "left"))
grid.text(names[i], x = unit(0, "npc"), just = "left")
upViewport()
}
}
# Create and display the custom legend
create_legend(legend_names, legend_colors)
# Define the legend names and colors
legend_names <- c(my_colors$legText)
legend_colors <- c(my_colors$legColors)
# Create a function to draw the custom legend
create_legend <- function(names, colors) {
# Set up the viewport
grid.newpage()
pushViewport(viewport(layout = grid.layout(length(names), 2, widths = unit(c(1, 4), "lines"))))
# Draw the colored points and text
for (i in seq_along(names)) {
pushViewport(viewport(layout.pos.row = i, layout.pos.col = 1))
grid.rect(gp = gpar(fill = colors[i]), width = unit(1, "lines"), height = unit(1, "lines"))
upViewport()
pushViewport(viewport(layout.pos.row = i, layout.pos.col = 2))
grid.text(names[i], x = unit(0.1, "npc"), just = "left")
upViewport()
}
}
# Create and display the custom legend
create_legend(legend_names, legend_colors)
?tempfile
?orca
?tempfile
# Save the plotly plot as an image
# Ensure you have a temporary directory to save the image
tempfile <- tempfile(fileext = ".png")
tempfile
orca(plot, tempfile)
# Plot UMAP result in 3D using plotly
plot <- plot_ly(umap_df,
x = ~UMAP1,
y = ~UMAP2,
z = ~UMAP3,
type = "scatter3d",
mode = "markers",
marker = list(color = my_colors$colors[,1])) %>%
layout(title = paste0("3D UMAP Projection of PCoA Components (Variance Explained: ",
round(variance_first_ten, 2), "%)"),
scene = list(xaxis = list(title = "UMAP 1",
yaxis = list(title = "UMAP 2",
zaxis = list(title = "UMAP 3")))),
#annotations = list(text=my_colors$legText),
showlegend = FALSE
)
plot
# Plot UMAP result in 3D using plotly
plot <- plot_ly(umap_df,
x = ~UMAP1,
y = ~UMAP2,
z = ~UMAP3,
type = "scatter3d",
mode = "markers",
marker = list(color = my_colors$colors[,1])) %>%
layout(title = paste0("3D UMAP Projection of PCoA Components (Variance Explained: ",
round(variance_first_ten, 2), "%)"),
scene = list(xaxis = list(title = "UMAP 1",
yaxis = list(title = "UMAP 2",
zaxis = list(title = "UMAP 3")))),
#annotations = list(text=my_colors$legText),
#showlegend = FALSE
)
plot
# Plot UMAP result in 3D using plotly
plot <- plot_ly(umap_df,
x = ~UMAP1,
y = ~UMAP2,
z = ~UMAP3,
type = "scatter3d",
mode = "markers",
marker = list(color = my_colors$colors[,1])) %>%
layout(title = paste0("3D UMAP Projection of PCoA Components (Variance Explained: ",
round(variance_first_ten, 2), "%)"),
scene = list(xaxis = list(title = "UMAP 1",
yaxis = list(title = "UMAP 2",
zaxis = list(title = "UMAP 3")))),
#annotations = list(text=my_colors$legText),
#showlegend = FALSE
)
# Plot UMAP result in 3D using plotly
plot <- plot_ly(umap_df,
x = ~UMAP1,
y = ~UMAP2,
z = ~UMAP3,
type = "scatter3d",
mode = "markers",
marker = list(color = my_colors$colors[,1])) %>%
layout(title = paste0("3D UMAP Projection of PCoA Components (Variance Explained: ",
round(variance_first_ten, 2), "%)"),
scene = list(xaxis = list(title = "UMAP 1",
yaxis = list(title = "UMAP 2",
zaxis = list(title = "UMAP 3")))))
plot
export(plot, file="test_plot.png")
orca(plot, file="test_plot.png")
?kaleido
kaleido(plot, file="test_plot.png")
kaleido(plot, file="test_plot.png")
plotly_IMAGE(plot, format="png", out_file = "output.png")
getwd()
install.packages("rmarkdown")
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
